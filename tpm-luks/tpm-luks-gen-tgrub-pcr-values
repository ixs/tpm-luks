#!/bin/bash -e
#
# tpm-luks-gen-tgrub-pcr-values
#
# Parse a grub1 menu.lst file and generate the future TPM PCR values needed
# to seal a system state to. Based on the implementation of the trustedgrub
# package at http://trustedgrub.sf.net.
#
# Author: Kent Yoder <shpedoikal@gmail.com>
#
####
# NVRAM permissions file format:
#
# [r/w] [PCR#] [40 byte ascii SHA-1 value]
#
# example:
#
# r 0 f952e49a7e90037fb6ee505d80a322798012db16
# r 15 a0ea6036b734da48b57fdd0fd87218cbada887ef
# w 12 3bd4ed7984d262f1d0d71e337ea4de290e17b4bd
#
# For this example, the TPM data written will only be readable when PCR 0's
# value is f952e49a7e90037fb6ee505d80a322798012db16 and PCR 15's value is
# a0ea6036b734da48b57fdd0fd87218cbada887ef and will only be writable when
# PCR 12's value is 3bd4ed7984d262f1d0d71e337ea4de290e17b4bd.
#
####
# How do you know which PCRs to use? The canonical reference document that
# describes which PCRs are used for which purposes for TPM 1.2 is here:
#
# http://www.trustedcomputinggroup.org/files/temp/64505409-1D09-3519-AD5C611FAD3F799B/PC%20Client%20Implementation%20for%20BIOS.pdf
#
# See section 3.2.3. A summary for convenience:
#
# PCR Index	Use
# 0		CRTM, BIOS, and Host Platform Extensions
# 1		Host Platform Configuration
# 2		Option ROM Code
# 3		Option ROM Configuration and Data
# 4		IPL Code (usually the MBR)
# 5		IPL Code Configuration and Data
# 6		State Transition and Wake Events
# 7		Host Platform Manufacturer Control
# 8-15		Used by the OS
#
# An explanation of the "srtm" profile (below):
#
# PCR 4  - record measurement of trusted grub in the MBR as measured by
#          the BIOS
# PCR 5  - record the IPL config - this is a record of the boot device
#          chosen by the user
# PCR 8  - The first 512 bytes of grub stage2
# PCR 9  - The rest of stage2
# PCR 12 - record trusted grub's config file command lines - note that
#          this includes the kernel command line, so any change to the
#          kernel command line will prevent releasing the NVRAM secret!
# PCR 14 - record the files that trusted grub launches - kernel and
#          initramfs
#
#
PCRS="4 5 8 9 12 14"
TMPFILE=
SOURCE=/sys/kernel/security/tpm0/ascii_bios_measurements
MENU=/boot/grub/menu.lst
STAGE2=/boot/grub/stage2
OUTFILE=/dev/stdout

if [ -z "${PCRS}" ]; then
	exit 0
elif [ ! -e ${SOURCE} ]; then
	echo "PCR measurements file not found, is securityfs mounted?" 1>&2
	exit 255
fi

function usage
{
	echo "usage ${0##/*} [options]"
	echo "options:"
	echo
	echo "  -o <file> Optional file to write NVRAM permissions files to (default is stdout)"
	echo "  -m <file> Optional GrUB menu.lst to parse (default is ${MENU})"
}

while getopts "o:m:" opt; do
	case $opt in
	o)
		OUTFILE=$OPTARG
		;;
	m)
		MENU=$OPTARG
		;;
	*)
		usage
		exit 255
		;;
	esac
done

cleanup()
{
	rm -f $TMPFILE
}

TMPFILE=$(mktemp -q /tmp/${0##*/}-XXXXXX)

if [ ! -n "$TMPFILE" ]; then
	echo "Temp file creation failed" 1>&2
	exit -1
fi

trap cleanup EXIT

OLD_IFS=${IFS}
IFS=$'\n'
TITLES=( $(cat $MENU | awk -F "\n" '$1 ~ /^[\W]*title/ { print $0 }' | sed 's/title//') )
TITLELN=( $(cat $MENU | awk -F "\n" '$1 ~ /^[\W]*title/ { print NR }') $(($(cat $MENU | wc -l) + 1)) )
DEFAULT=$(cat $MENU | awk -F= '$1 ~ /default/ { print $2 }')
IFS=${OLD_IFS}
NUM_ENTRIES=$(( ${#TITLES[@]} - 1 ))
BOOT=$(echo -n "boot" | sha1sum | awk '{ print $1 }')

#echo "Writing PCRs for \"$MENU\" boot entries:"
for e in $(seq 0 $NUM_ENTRIES); do
	if [ $(($e + 1)) -ne $DEFAULT ]; then
		continue
	fi

	#echo -n "$e: \"${TITLES[$e]}\""

	# Extract relevant segment of the menu file to work on
	TEXT=$(cat $MENU | awk "NR==${TITLELN[$e]},NR==${TITLELN[$e+1]} - 1")

	# save off the file names (required for PCR 14)
	KERNEL_FILE="/boot$(echo "$TEXT" | awk -F "\n" '$1 ~ /^\Wkernel/ { print $0 }' | awk '{ print $2 }')"
	INITRD_FILE=( $(echo "$TEXT" | awk -F "\n" '$1 ~ /^\Winitrd|module/ { print $0 }' | awk '{ print $2 }') )
	for i in $(seq 0 $((${#INITRD_FILE[@]} - 1)) ); do
		INITRD_FILE[$i]="/boot${INITRD_FILE[$i]}"
	done

	# compute hashes of the strings themselves (required for PCR 12)
	ROOTS=$(echo "$TEXT" | awk -F "\n" '$1 ~ /^\Wroot/ { print $0 }' | sed 's/^[ \t]*//' | tr -d "\n"|sha1sum | awk '{ print $1}')
	KERNELS=$(echo "$TEXT" | awk -F "\n" '$1 ~ /^\Wkernel/ { print $0 }' | sed 's/^[ \t]*//' | tr -d "\n"|sha1sum | awk '{ print $1}')
        INITRDS=( $(echo "$TEXT" | awk -F "\n" '$1 ~ /^\Winitrd|module/ { print $0 }' | while read line; do
		echo "$line" | sed 's/^[ \t]*//' | tr -d "\n" | sha1sum | awk '{ print $1}'
	done) )

	for PCRNUM in ${PCRS[@]}; do
		AWK_STR="\$1 ~ /${PCRNUM}/ { print \$2 }"
		MEASUREMENTS=$(cat $SOURCE | awk "$AWK_STR")

		#echo "awk str: $AWK_STR"
		#echo "measurements: $MEASUREMENTS"

		j=0
		for m in $MEASUREMENTS; do
			if [ $j -eq 0 ]; then
				CURR_PCR=$(tpm-luks-chain-hashes -o $TMPFILE -h $m)
			else
				CURR_PCR=$(tpm-luks-chain-hashes -f $TMPFILE -o $TMPFILE -h $m)
			fi

			j=1
		done

		# Sitting in $TMPFILE is the binary hash value of $PCRNUM at the point in
		# time where the BIOS launched the MBR.
		#
		# Using $TMPFILE as a starting point, continue the chaining process

		# XXX TODO Checkfile support in PCR13
		case $PCRNUM in
		8)
			rm ${TMPFILE}
			dd if=${STAGE2} of=${TMPFILE} bs=1c count=512 >/dev/null 2>&1
			CURR_PCR=$(tpm-luks-chain-hashes ${TMPFILE})
			echo "r $PCRNUM $CURR_PCR" >> ${OUTFILE}
			;;
		9)
			rm ${TMPFILE}
			dd if=${STAGE2} of=${TMPFILE} bs=1c skip=512 >/dev/null 2>&1
			CURR_PCR=$(tpm-luks-chain-hashes ${TMPFILE})
			echo "r $PCRNUM $CURR_PCR" >> ${OUTFILE}
			;;
		12)
			CURR_PCR=$(tpm-luks-chain-hashes -o $TMPFILE -h ${ROOTS} ${KERNELS} ${INITRDS[@]} ${BOOT})
			echo "r $PCRNUM $CURR_PCR" >> ${OUTFILE}
			#echo "w $PCRNUM $CURR_PCR"
			;;
		14)
			CURR_PCR=$(tpm-luks-chain-hashes -o $TMPFILE ${KERNEL_FILE} ${INITRD_FILE[@]})
			echo "r $PCRNUM $CURR_PCR" >> ${OUTFILE}
			#echo "w $PCRNUM $CURR_PCR"
			;;
		*)
			echo "r $PCRNUM $CURR_PCR" >> ${OUTFILE}
			;;
		esac
	done
done

exit 0
